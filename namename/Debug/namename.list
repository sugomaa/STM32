
namename.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000688  08000688  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000688  08000688  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000688  08000688  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000688  08000688  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000690  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001615  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000578  00000000  00000000  0002168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d8  00000000  00000000  00021c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000014d  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b6eb  00000000  00000000  00021f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000023f8  00000000  00000000  0003d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a82b9  00000000  00000000  0003fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000598  00000000  00000000  000e7ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000e8264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000670 	.word	0x08000670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000670 	.word	0x08000670

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <init_tim_gpio>:
#include "main.h"

void init_tim_gpio(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

RCC -> AHBENR |= RCC_AHBENR_GPIOEEN;
 8000208:	4b32      	ldr	r3, [pc, #200]	; (80002d4 <init_tim_gpio+0xd0>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a31      	ldr	r2, [pc, #196]	; (80002d4 <init_tim_gpio+0xd0>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000212:	6153      	str	r3, [r2, #20]
//TIM1_CH3, PE13, AF2 (alternate function)

GPIOE -> MODER |= GPIO_MODER_MODER9_1;
 8000214:	4b30      	ldr	r3, [pc, #192]	; (80002d8 <init_tim_gpio+0xd4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2f      	ldr	r2, [pc, #188]	; (80002d8 <init_tim_gpio+0xd4>)
 800021a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800021e:	6013      	str	r3, [r2, #0]
GPIOE -> MODER &=~ GPIO_MODER_MODER9_0;
 8000220:	4b2d      	ldr	r3, [pc, #180]	; (80002d8 <init_tim_gpio+0xd4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2c      	ldr	r2, [pc, #176]	; (80002d8 <init_tim_gpio+0xd4>)
 8000226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022a:	6013      	str	r3, [r2, #0]


GPIOE -> MODER &=~ GPIO_MODER_MODER13_1;
 800022c:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <init_tim_gpio+0xd4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a29      	ldr	r2, [pc, #164]	; (80002d8 <init_tim_gpio+0xd4>)
 8000232:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000236:	6013      	str	r3, [r2, #0]
GPIOE -> MODER |= GPIO_MODER_MODER13_0;
 8000238:	4b27      	ldr	r3, [pc, #156]	; (80002d8 <init_tim_gpio+0xd4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a26      	ldr	r2, [pc, #152]	; (80002d8 <init_tim_gpio+0xd4>)
 800023e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000242:	6013      	str	r3, [r2, #0]

GPIOE -> MODER |=GPIO_MODER_MODER8_0;
 8000244:	4b24      	ldr	r3, [pc, #144]	; (80002d8 <init_tim_gpio+0xd4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a23      	ldr	r2, [pc, #140]	; (80002d8 <init_tim_gpio+0xd4>)
 800024a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]
GPIOE -> MODER &= ~GPIO_MODER_MODER8_1;
 8000250:	4b21      	ldr	r3, [pc, #132]	; (80002d8 <init_tim_gpio+0xd4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <init_tim_gpio+0xd4>)
 8000256:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800025a:	6013      	str	r3, [r2, #0]

GPIOE -> MODER |=GPIO_MODER_MODER11_0;
 800025c:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <init_tim_gpio+0xd4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1d      	ldr	r2, [pc, #116]	; (80002d8 <init_tim_gpio+0xd4>)
 8000262:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000266:	6013      	str	r3, [r2, #0]
GPIOE -> MODER &= ~GPIO_MODER_MODER11_1;
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <init_tim_gpio+0xd4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <init_tim_gpio+0xd4>)
 800026e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000272:	6013      	str	r3, [r2, #0]

//GPIOE -> AFR[1] |= GPIO_AFRH_AFRH2;
//GPIOE -> AFR[1] |= AFR_AFRH_AFRH5 & (1<<2);
GPIOE -> AFR[1] |= (1<<5);
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <init_tim_gpio+0xd4>)
 8000276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <init_tim_gpio+0xd4>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6253      	str	r3, [r2, #36]	; 0x24

GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0;
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <init_tim_gpio+0xd4>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <init_tim_gpio+0xd4>)
 8000286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800028a:	6093      	str	r3, [r2, #8]
GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <init_tim_gpio+0xd4>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <init_tim_gpio+0xd4>)
 8000292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000296:	6093      	str	r3, [r2, #8]

GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_0;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <init_tim_gpio+0xd4>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <init_tim_gpio+0xd4>)
 800029e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a2:	6093      	str	r3, [r2, #8]
GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <init_tim_gpio+0xd4>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <init_tim_gpio+0xd4>)
 80002aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002ae:	6093      	str	r3, [r2, #8]

GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_0;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <init_tim_gpio+0xd4>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <init_tim_gpio+0xd4>)
 80002b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ba:	6093      	str	r3, [r2, #8]
GPIOE -> OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <init_tim_gpio+0xd4>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <init_tim_gpio+0xd4>)
 80002c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002c6:	6093      	str	r3, [r2, #8]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000
 80002d8:	48001000 	.word	0x48001000

080002dc <init_tim>:

void init_tim(int dutty)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
//PWM 1 MODE
RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <init_tim+0x94>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a21      	ldr	r2, [pc, #132]	; (8000370 <init_tim+0x94>)
 80002ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ee:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1PE;
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <init_tim+0x98>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	; (8000374 <init_tim+0x98>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]

//Prescaler 0x0F
TIM1 -> PSC = 0x0F;
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <init_tim+0x98>)
 80002fe:	220f      	movs	r2, #15
 8000300:	629a      	str	r2, [r3, #40]	; 0x28

//

TIM1 -> CCMR1 &=~ TIM_CCMR1_OC1M_0;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <init_tim+0x98>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <init_tim+0x98>)
 8000308:	f023 0310 	bic.w	r3, r3, #16
 800030c:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1M_1;
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <init_tim+0x98>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <init_tim+0x98>)
 8000314:	f043 0320 	orr.w	r3, r3, #32
 8000318:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 |= TIM_CCMR1_OC1M_2;
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <init_tim+0x98>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a15      	ldr	r2, [pc, #84]	; (8000374 <init_tim+0x98>)
 8000320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000324:	6193      	str	r3, [r2, #24]
TIM1 -> CCMR1 &=~ TIM_CCMR1_OC1M_3;
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <init_tim+0x98>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <init_tim+0x98>)
 800032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000330:	6193      	str	r3, [r2, #24]

//Frequency register: ARR, where period is 1000
TIM1 -> ARR = 100;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <init_tim+0x98>)
 8000334:	2264      	movs	r2, #100	; 0x64
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c

//Duty cycle
TIM1 -> CCR1 = dutty;
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <init_tim+0x98>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6353      	str	r3, [r2, #52]	; 0x34

//
TIM1 -> BDTR |= TIM_BDTR_MOE;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <init_tim+0x98>)
 8000340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000342:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <init_tim+0x98>)
 8000344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000348:	6453      	str	r3, [r2, #68]	; 0x44
TIM1 -> CCER |= TIM_CCER_CC1E;
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <init_tim+0x98>)
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <init_tim+0x98>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6213      	str	r3, [r2, #32]
TIM1 -> CR1 |= TIM_CR1_CEN;
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <init_tim+0x98>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <init_tim+0x98>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6013      	str	r3, [r2, #0]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40012c00 	.word	0x40012c00

08000378 <EXTI0_config>:

void EXTI0_config(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <EXTI0_config+0x54>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a12      	ldr	r2, [pc, #72]	; (80003cc <EXTI0_config+0x54>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6193      	str	r3, [r2, #24]
SYSCFG -> EXTICR[0] &=~ SYSCFG_EXTICR1_EXTI0;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <EXTI0_config+0x58>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <EXTI0_config+0x58>)
 800038e:	f023 030f 	bic.w	r3, r3, #15
 8000392:	6093      	str	r3, [r2, #8]
SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <EXTI0_config+0x58>)
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <EXTI0_config+0x58>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	6093      	str	r3, [r2, #8]

//Trigger on rising edge
EXTI -> RTSR &=~ EXTI_RTSR_TR0;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <EXTI0_config+0x5c>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <EXTI0_config+0x5c>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6093      	str	r3, [r2, #8]
EXTI -> FTSR |= EXTI_FTSR_TR0;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <EXTI0_config+0x5c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a09      	ldr	r2, [pc, #36]	; (80003d4 <EXTI0_config+0x5c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	60d3      	str	r3, [r2, #12]

//Enable interrupt
EXTI -> IMR |= EXTI_IMR_MR0;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <EXTI0_config+0x5c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <EXTI0_config+0x5c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]

//NVIC
NVIC_EnableIRQ(EXTI0_IRQn);
 80003c0:	2006      	movs	r0, #6
 80003c2:	f7ff ff01 	bl	80001c8 <__NVIC_EnableIRQ>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000
 80003d4:	40010400 	.word	0x40010400

080003d8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
if (EXTI -> PR & EXTI_PR_PR0){
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <EXTI0_IRQHandler+0x3c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d010      	beq.n	800040a <EXTI0_IRQHandler+0x32>
//clear interrupt
EXTI -> PR |= EXTI_PR_PR0;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <EXTI0_IRQHandler+0x3c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <EXTI0_IRQHandler+0x3c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6153      	str	r3, [r2, #20]
TIM1 -> CCR1 += TIM1 -> ARR/50;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI0_IRQHandler+0x40>)
 80003f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f8:	4a08      	ldr	r2, [pc, #32]	; (800041c <EXTI0_IRQHandler+0x44>)
 80003fa:	fba2 2303 	umull	r2, r3, r2, r3
 80003fe:	091a      	lsrs	r2, r3, #4
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI0_IRQHandler+0x40>)
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000404:	4904      	ldr	r1, [pc, #16]	; (8000418 <EXTI0_IRQHandler+0x40>)
 8000406:	4413      	add	r3, r2
 8000408:	634b      	str	r3, [r1, #52]	; 0x34
}
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40010400 	.word	0x40010400
 8000418:	40012c00 	.word	0x40012c00
 800041c:	51eb851f 	.word	0x51eb851f

08000420 <main>:


int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0

EXTI0_config();
 8000426:	f7ff ffa7 	bl	8000378 <EXTI0_config>
init_tim_gpio();
 800042a:	f7ff feeb 	bl	8000204 <init_tim_gpio>


while (1)
{

int b = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
while (b<100){
 8000432:	e038      	b.n	80004a6 <main+0x86>

init_tim(b);
 8000434:	69f8      	ldr	r0, [r7, #28]
 8000436:	f7ff ff51 	bl	80002dc <init_tim>
b++;
 800043a:	69fb      	ldr	r3, [r7, #28]
 800043c:	3301      	adds	r3, #1
 800043e:	61fb      	str	r3, [r7, #28]

for (int i=0; i<5000; i++);
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
 8000444:	e002      	b.n	800044c <main+0x2c>
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	3301      	adds	r3, #1
 800044a:	61bb      	str	r3, [r7, #24]
 800044c:	69bb      	ldr	r3, [r7, #24]
 800044e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000452:	4293      	cmp	r3, r2
 8000454:	ddf7      	ble.n	8000446 <main+0x26>
GPIOE -> BSRR |= GPIO_BSRR_BS_13;
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <main+0x110>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a35      	ldr	r2, [pc, #212]	; (8000530 <main+0x110>)
 800045c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000460:	6193      	str	r3, [r2, #24]
for (int i=0; i<5000; i++);
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e002      	b.n	800046e <main+0x4e>
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	f241 3287 	movw	r2, #4999	; 0x1387
 8000474:	4293      	cmp	r3, r2
 8000476:	ddf7      	ble.n	8000468 <main+0x48>
GPIOE -> BSRR |= GPIO_BSRR_BR_8;
 8000478:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <main+0x110>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <main+0x110>)
 800047e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000482:	6193      	str	r3, [r2, #24]
for (int i=0; i<5000; i++);
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	e002      	b.n	8000490 <main+0x70>
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	3301      	adds	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	f241 3287 	movw	r2, #4999	; 0x1387
 8000496:	4293      	cmp	r3, r2
 8000498:	ddf7      	ble.n	800048a <main+0x6a>
GPIOE -> BSRR |= GPIO_BSRR_BR_11;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <main+0x110>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a24      	ldr	r2, [pc, #144]	; (8000530 <main+0x110>)
 80004a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004a4:	6193      	str	r3, [r2, #24]
while (b<100){
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	2b63      	cmp	r3, #99	; 0x63
 80004aa:	ddc3      	ble.n	8000434 <main+0x14>
}


if (b>=100){
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	2b63      	cmp	r3, #99	; 0x63
 80004b0:	ddbd      	ble.n	800042e <main+0xe>
while(b>0){
 80004b2:	e038      	b.n	8000526 <main+0x106>

init_tim(b);
 80004b4:	69f8      	ldr	r0, [r7, #28]
 80004b6:	f7ff ff11 	bl	80002dc <init_tim>
b--;
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	3b01      	subs	r3, #1
 80004be:	61fb      	str	r3, [r7, #28]

for (int i=0; i<5000; i++);
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e002      	b.n	80004cc <main+0xac>
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80004d2:	4293      	cmp	r3, r2
 80004d4:	ddf7      	ble.n	80004c6 <main+0xa6>
GPIOE -> BSRR |= GPIO_BSRR_BR_13;
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <main+0x110>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <main+0x110>)
 80004dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004e0:	6193      	str	r3, [r2, #24]
for (int i=0; i<5000; i++);
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	e002      	b.n	80004ee <main+0xce>
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80004f4:	4293      	cmp	r3, r2
 80004f6:	ddf7      	ble.n	80004e8 <main+0xc8>
GPIOE -> BSRR |= GPIO_BSRR_BS_8;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <main+0x110>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x110>)
 80004fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000502:	6193      	str	r3, [r2, #24]
for (int i=0; i<5000; i++);
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	e002      	b.n	8000510 <main+0xf0>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3301      	adds	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f241 3287 	movw	r2, #4999	; 0x1387
 8000516:	4293      	cmp	r3, r2
 8000518:	ddf7      	ble.n	800050a <main+0xea>
GPIOE -> BSRR |= GPIO_BSRR_BS_11;
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <main+0x110>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a04      	ldr	r2, [pc, #16]	; (8000530 <main+0x110>)
 8000520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000524:	6193      	str	r3, [r2, #24]
while(b>0){
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b00      	cmp	r3, #0
 800052a:	dcc3      	bgt.n	80004b4 <main+0x94>
{
 800052c:	e77f      	b.n	800042e <main+0xe>
 800052e:	bf00      	nop
 8000530:	48001000 	.word	0x48001000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000580:	f000 f83e 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f7ff ffea 	bl	8000588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f000 f825 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f7ff ff1f 	bl	8000420 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005f0:	08000690 	.word	0x08000690
  ldr r2, =_sbss
 80005f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005f8:	20000024 	.word	0x20000024

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000
 8000624:	20000020 	.word	0x20000020

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4d0d      	ldr	r5, [pc, #52]	; (8000660 <__libc_init_array+0x38>)
 800062c:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	2600      	movs	r6, #0
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	4d0b      	ldr	r5, [pc, #44]	; (8000668 <__libc_init_array+0x40>)
 800063a:	4c0c      	ldr	r4, [pc, #48]	; (800066c <__libc_init_array+0x44>)
 800063c:	f000 f818 	bl	8000670 <_init>
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	10a4      	asrs	r4, r4, #2
 8000644:	2600      	movs	r6, #0
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	08000688 	.word	0x08000688
 8000664:	08000688 	.word	0x08000688
 8000668:	08000688 	.word	0x08000688
 800066c:	0800068c 	.word	0x0800068c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
